pipeline {
    agent any

    environment {
        CONTAINER_NAME = 'layover-container'
        DOCKER_IMG_NAME = 'layover/layover'
        PROJECT_PATH = 'BE/layover'
    }

    stages {
        // ...

        stage('Build and Push Docker Image') {
            steps {
                script {
                    try {
                        dir("$PROJECT_PATH") {
                            // COMMIT_HASH를 Jenkinsfile에서 얻음
                            echo '빌드 시작'
                            def commitHash = sh(script: 'git log -1 --pretty=%H', returnStdout: true).trim()
                            def dockerImage = docker.build("${DOCKER_IMG_NAME}:${commitHash}")

                            // Docker Hub에 로그인
                            withDockerRegistry([credentialsId: 'docker-hub-credentials', url: '']) {
                                // Docker 이미지 push
                                dockerImage.push("${commitHash}")
                            }
                            echo '빌드 및 푸시 성공'
                        }
                    } catch (Exception e) {
                        echo '빌드 및 푸시 실패: ' + e.getMessage()
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    try {
                        dir("$PROJECT_PATH") {
                            def commitHash = sh(script: 'git log -1 --pretty=%H', returnStdout: true).trim()
                            def dockerImage = docker.image("${DOCKER_IMG_NAME}:${commitHash}")
                            dockerImage.run("""
                            -p 3000:3000
                            --name ${CONTAINER_NAME}
                            -v ~/envs/.env:/usr/src/app/.env
                            -v ~/envs/ca_bundle.crt:/usr/src/app/ca_bundle.crt
                            -v ~/envs/certificate.crt:/usr/src/app/certificate.crt
                            -v ~/envs/private.key:/usr/src/app/private.key
                            """)
                            echo '컨테이너 실행 성공'
                        }
                    } catch (Exception e) {
                        echo '컨테이너 실행 실패: ' + e.getMessage()
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        }
    }
}
