//
//  SettingInteractor.swift
//  Layover
//
//  Created by 김인환 on 12/6/23.
//  Copyright (c) 2023 CodeBomber. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SettingBusinessLogic {
    func performTableViewConfigure(request: SettingModels.ConfigureTableView.Request)
    func performUserLogout(request: SettingModels.Logout.Request)
    @discardableResult
    func performUserWithdraw(request: SettingModels.Withdraw.Request) async -> Bool
}

protocol SettingDataStore {

}

final class SettingInteractor: SettingBusinessLogic, SettingDataStore {

    // MARK: - Properties

    typealias Models = SettingModels
    var presenter: SettingPresentationLogic?
    var settingWorker: SettingWorkerProtocol?
    var userWorker: UserWorkerProtocol?

    // MARK: - Methods

    func performTableViewConfigure(request: Models.ConfigureTableView.Request) {
        let response = Models.ConfigureTableView.Response(versionNumber: settingWorker?.versionNumber() ?? "")
        presenter?.presentTableView(with: response)
    }

    func performUserLogout(request: SettingModels.Logout.Request) {
        userWorker?.logout()
        presenter?.presentUserLogoutConfirmed(with: Models.Logout.Response())
    }

    @discardableResult
    func performUserWithdraw(request: SettingModels.Withdraw.Request) async -> Bool {
        guard (await userWorker?.withdraw()) != nil else { return false }
        userWorker?.logout()
        await MainActor.run {
            presenter?.presentUserWithdrawConfirmed(with: Models.Withdraw.Response())
        }
        return true
    }
}
