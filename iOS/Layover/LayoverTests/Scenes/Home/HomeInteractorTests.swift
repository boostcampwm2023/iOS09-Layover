//
//  HomeInteractorTests.swift
//  Layover
//
//  Created by 김인환 on 12/4/23.
//  Copyright (c) 2023 CodeBomber. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Layover
import XCTest

final class HomeInteractorTests: XCTestCase {

    // MARK: Subject under test
    typealias Models = HomeModels
    var sut: HomeInteractor!

    // MARK: - Test lifecycle

    override func setUp() {
        super.setUp()
        setupHomeInteractor()
    }

    // MARK: - Test setup

    func setupHomeInteractor() {
        sut = HomeInteractor()
        sut.homeWorker = MockHomeWorker()
    }

    // MARK: - Test doubles

    final class HomePresentationLogicSpy: HomePresentationLogic {
        func presentMorePosts(with response: Layover.HomeModels.FetchPosts.Response) {

        }
        
        func presentUploadScene() {

        }
        
        func presentSetting() {

        }
        // 호출 테스트를 위한 Spy
        var presentPostsCalled = false
        var presentPostsReceivedResponse: Models.FetchPosts.Response!
        var presentPlaybackSceneCalled = false
        var presentTagPlayListCalled = false

        func presentPosts(with response: Models.FetchPosts.Response) {
            presentPostsCalled = true
            presentPostsReceivedResponse = response
        }

        func presentPlaybackScene(with response: Models.PlayPosts.Response) {
            presentPlaybackSceneCalled = true
        }

        func presentTagPlayList(with response: Models.ShowTagPlayList.Response) {
            presentTagPlayListCalled = true
        }
    }

    // MARK: - Tests

    func test_fetchPost는_presenter의_presentPosts를_호출하고_올바른_데이터를_전달한다() async throws {
        // Arrange
        let spy = HomePresentationLogicSpy()
        sut.presenter = spy
        let request = Models.FetchPosts.Request()

        // Act
        await sut.fetchPosts(with: request)

        // Assert
        XCTAssertTrue(spy.presentPostsCalled, "fetchPost()가 presenter의 presentPosts()를 호출하지 못했다.")
        XCTAssertEqual(spy.presentPostsReceivedResponse.posts.count, 1, "fetchPost()가 presenter에게 올바른 데이터 갯수를 저장하지 못했다.")
        XCTAssertEqual(spy.presentPostsReceivedResponse.posts[0].tag,
                       Seeds.PostsPage.post1.tag,
                       "fetchPost()가 presenter에게 올바른 데이터를 저장하지 못했다.")
        XCTAssertEqual(spy.presentPostsReceivedResponse.posts[0].board.identifier,
                       Seeds.PostsPage.post1.board.identifier,
                       "fetchPost()가 presenter에게 올바른 데이터를 저장하지 못했다.")
        XCTAssertEqual(spy.presentPostsReceivedResponse.posts[0].board.title, 
                       Seeds.PostsPage.post1.board.title,
                       "fetchPost()가 presenter에게 올바른 데이터를 저장하지 못했다.")
        XCTAssertEqual(spy.presentPostsReceivedResponse.posts[0].board.description, 
                       Seeds.PostsPage.post1.board.description,
                       "fetchPost()가 presenter에게 올바른 데이터를 저장하지 못했다.")
        XCTAssertEqual(spy.presentPostsReceivedResponse.posts[0].board.latitude,
                       Seeds.PostsPage.post1.board.latitude,
                       "fetchPost()가 presenter에게 올바른 데이터를 저장하지 못했다.")
        XCTAssertEqual(spy.presentPostsReceivedResponse.posts[0].board.longitude,
                       Seeds.PostsPage.post1.board.longitude,
                       "fetchPost()가 presenter에게 올바른 데이터를 저장하지 못했다.")
        XCTAssertEqual(spy.presentPostsReceivedResponse.posts[0].board.thumbnailImageURL,
                       Seeds.PostsPage.post1.board.thumbnailImageURL,
                       "fetchPost()가 presenter에게 올바른 데이터를 저장하지 못했다.")
        XCTAssertEqual(spy.presentPostsReceivedResponse.posts[0].board.videoURL,
                       Seeds.PostsPage.post1.board.videoURL,
                       "fetchPost()가 presenter에게 올바른 데이터를 저장하지 못했다.")
        XCTAssertEqual(spy.presentPostsReceivedResponse.posts[0].board.status,
                       Seeds.PostsPage.post1.board.status,
                       "fetchPost()가 presenter에게 올바른 데이터를 저장하지 못했다.")
        XCTAssertEqual(spy.presentPostsReceivedResponse.posts[0].member.username,
                       Seeds.PostsPage.post1.member.username,
                       "fetchPost()가 presenter에게 올바른 데이터를 저장하지 못했다.")
        XCTAssertEqual(spy.presentPostsReceivedResponse.posts[0].member.introduce,
                       Seeds.PostsPage.post1.member.introduce,
                       "fetchPost()가 presenter에게 올바른 데이터를 저장하지 못했다.")
        XCTAssertEqual(spy.presentPostsReceivedResponse.posts[0].member.profileImageURL,
                       Seeds.PostsPage.post1.member.profileImageURL,
                       "fetchPost()가 presenter에게 올바른 데이터를 저장하지 못했다.")
        XCTAssertEqual(spy.presentPostsReceivedResponse.posts[0].member.identifier,
                       Seeds.PostsPage.post1.member.identifier,
                       "fetchPost()가 presenter에게 올바른 데이터를 저장하지 못했다.")
    }

    func test_playPosts는_자신의_selectedIndex값을_변경한다() {
        // Arrange
        let request = Models.PlayPosts.Request(selectedIndex: 101)

        // Act
        sut.playPosts(with: request)

        // Assert
        XCTAssertEqual(sut.postPlayStartIndex, 101, "playPosts()가 자신의 selectedIndex를 변경하지 못했다.")
    }

    func test_playPosts는_presenter의_presentPlaybackScene를_호출한다() {
        // Arrange
        let spy = HomePresentationLogicSpy()
        sut.presenter = spy
        let request = Models.PlayPosts.Request(selectedIndex: 0)

        // Act
        sut.playPosts(with: request)

        // Assert
        XCTAssertTrue(spy.presentPlaybackSceneCalled, "playPosts()가 presenter의 presentPlaybackScene()를 호출하지 않았다.")
    }

    // TODO: - videoFileWorker Mock 객체 생성 후 테스트 코드 작성
//    func testSelectVideo는_자신의_selectedVideoURL값을_변경한다() {
//        // Arrange
//        guard let dummyVideoURL = URL(string: "https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/master.m3u8") else {
//            XCTFail("URL 생성 실패")
//            return
//        }
//        let request = Models.SelectVideo.Request(videoURL: dummyVideoURL)
//
//        // Act
//        sut.selectVideo(with: request)
//
//        // Assert
//
//        guard let selectedVideoURL = sut.selectedVideoURL else {
//            XCTFail("selectedVideoURL이 nil")
//            return
//        }
//
//        XCTAssertEqual(selectedVideoURL, dummyVideoURL)
//    }

    func test_showTagPlayList는_자신의_selectedTag값을_변경한다() {
        // Arrange
        let request = Models.ShowTagPlayList.Request(tag: "DummyTag")

        // Act
        sut.showTagPlayList(with: request)

        // Assert
        XCTAssertEqual(sut.selectedTag, "DummyTag", "showTagPlayList()가 자신의 selectedTag를 변경되지 않았다.")
    }

    func test_showTagPlayList는_presenter의_presentTagPlayList를_호출한다() {
        // Arrange
        let spy = HomePresentationLogicSpy()
        sut.presenter = spy
        let request = Models.ShowTagPlayList.Request(tag: "DummyTag")

        // Act
        sut.showTagPlayList(with: request)

        // Assert
        XCTAssertTrue(spy.presentTagPlayListCalled, "showTagPlayList()가 presenter의 presentTagPlayList()를 호출되지 않았다.")
    }
}
