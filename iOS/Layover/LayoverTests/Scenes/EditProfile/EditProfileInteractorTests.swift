//
//  EditProfileInteractorTests.swift
//  Layover
//
//  Created by 김인환 on 12/13/23.
//  Copyright (c) 2023 CodeBomber. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Layover
import XCTest

final class EditProfileInteractorTests: XCTestCase {
    // MARK: Subject under test

    var sut: EditProfileInteractor!

    let stubNickname = "안유진"
    let stubIntroduce = "아이브의 리더 안유진"
    let stubProfileImageData = Seeds.sampleImageData

    typealias Models = EditProfileModels

    // MARK: - Test lifecycle

    override func setUp() {
        super.setUp()
        setupEditProfileInteractor()
    }

    override func tearDown() {
        super.tearDown()
    }

    // MARK: - Test setup

    func setupEditProfileInteractor() {
        sut = EditProfileInteractor()
        sut.userWorker = MockUserWorker()
        sut.nickname = stubNickname
        sut.introduce = stubIntroduce
        sut.profileImageData = stubProfileImageData
    }

    // MARK: - Test doubles

    final class EditProfilePresentationLogicSpy: EditProfilePresentationLogic {
        var presentSetProfileCalled = false
        var presentSetProfileResponse: Models.SetProfile.Response!
        var presentEditProfileCalled = false
        var presentProfileStateCalled = false
        var presentProfileStateResponse: Models.ChangeProfile.Response!
        var presentNicknameDuplicationCalled = false
        var presentNicknameDuplicationResponse: Models.CheckNicknameDuplication.Response!

        func presentProfile(with response: Models.SetProfile.Response) {
            presentSetProfileCalled = true
            presentSetProfileResponse = response
        }

        func presentProfile(with response: Models.EditProfile.Response) {
            presentEditProfileCalled = true
        }

        func presentProfileState(with response: Models.ChangeProfile.Response) {
            presentProfileStateCalled = true
            presentProfileStateResponse = response
        }

        func presentNicknameDuplication(with response: Models.CheckNicknameDuplication.Response) {
            presentNicknameDuplicationCalled = true
            presentNicknameDuplicationResponse = response
        }
    }

    final class UserWorkerMock: UserWorker {
        override func checkNotDuplication(for userName: String) async -> Bool? {
            return false
        }
    }

    // MARK: - Tests

    func test_setProfile을_실행하면_presenter의_presentProfile이_호출되고_자신의_데이터를_presenter에게_전달한다() {
        // arrange
        let spy = EditProfilePresentationLogicSpy()
        sut.presenter = spy

        // act
        sut.setProfile(with: Models.SetProfile.Request())

        // assert
        XCTAssertTrue(spy.presentSetProfileCalled, "setProfile은 presenter의 presentProfile을 호출하지 못했다.")
        XCTAssertEqual(spy.presentSetProfileResponse.nickname, stubNickname, "setProfile은 presenter에게 nickname을 전달하지 못했다.")
        XCTAssertEqual(spy.presentSetProfileResponse.introduce, stubIntroduce, "setProfile은 presenter에게 introduce를 전달하지 못했다.")
        XCTAssertEqual(spy.presentSetProfileResponse.profileImageData, stubProfileImageData, "setProfile은 presenter에게 profileImageData를 전달하지 못했다.")
    }

    func test_changeProfile을_실행했을때_presenter의_presentProfileState가_호출되고_전달된_nickname이_2자_이상_8자_이하의_한글영숫자로만_이루어진_닉네임이면_presenter에_nicknameState를_valid로_전달하고_canEditProfile을_True로_전달하고_기존_닉네임과_다르면_canCheckNicknameDuplicate를_true로_전달한다() {
        // arrange
        let changedNickname = "안유진an12"
        let spy = EditProfilePresentationLogicSpy()
        sut.presenter = spy

        // act
        sut.changeProfile(with: Models.ChangeProfile.Request(changedProfileComponent: .nickname(changedNickname)))

        // assert
        XCTAssertTrue(spy.presentProfileStateCalled, "changeProfile을 호출해서 presenter의 presentProfileState를 호출하지 못했다.")
        XCTAssertEqual(spy.presentProfileStateResponse.nicknameState, .valid, "changeProfile을 호출해서 presenter에게 올바른 nickname의 nicknameState를 전달하지 못했다.")
        XCTAssertFalse(spy.presentProfileStateResponse.canEditProfile, "changeProfile을 호출해서 presenter에게 올바른 canEditProfile 값을 전달하지 못했다.")
        XCTAssertNil(spy.presentProfileStateResponse.introduceAlertDescription, "presenter에게 올바른 introduceAlertDescription을 전달하지 못했다.")
        XCTAssertTrue(spy.presentProfileStateResponse.canCheckNicknameDuplication!, "changeProfile을 호출해서 presenter에게 anCheckNicknameDuplication을 true로 전달하지 못했다.")
    }

    func test_changeProfile을_실행했을때_presenter의_presentProfileState가_호출되고_전달된_nickname이_2자_이상_8자_이하의_한글영숫자로만_이루어진_닉네임이면_presenter에_nicknameState를_valid로_전달하고_기존_닉네임과_같으면_canEditProfile을_false로_전달하고_canCheckNicknameDuplicate를_false로_전달한다() {
        // arrange
        let changedNickname = stubNickname
        let spy = EditProfilePresentationLogicSpy()
        sut.presenter = spy

        // act
        sut.changeProfile(with: Models.ChangeProfile.Request(changedProfileComponent: .nickname(changedNickname)))

        // assert
        XCTAssertTrue(spy.presentProfileStateCalled, "changeProfile을 호출해서 presenter의 presentProfileState를 호출하지 못했다.")
        XCTAssertEqual(spy.presentProfileStateResponse.nicknameState, .valid, "changeProfile을 호출해서 presenter에게 올바른 nickname의 nicknameState를 전달하지 못했다.")
        XCTAssertFalse(spy.presentProfileStateResponse.canEditProfile, "changeProfile을 호출해서 presenter에게 올바른 canEditProfile값을 전달하지 못했다.")
        XCTAssertNil(spy.presentProfileStateResponse.introduceAlertDescription, "presenter에게 올바른 introduceAlertDescription을 전달하지 못했다.")
        XCTAssertFalse(spy.presentProfileStateResponse.canCheckNicknameDuplication!, "changeProfile을 호출해서 presenter에게 올바른 canCheckNicknameDuplication을 전달하지 못했다.")
    }


    func test_changeProfile을_실행했을때_presenter의_presentProfileState가_호출되고_전달된_nickname이_2자_이상_8자_이하로_이루어진_한글영숫자로만_이루어지지_않은_다른_닉네임이면_presenter에_nicknameState를_invalidCharacter로_전달한다() {
        // arrange
        let changedNickname = "유진jin😭"
        let spy = EditProfilePresentationLogicSpy()
        sut.presenter = spy

        // act
        sut.changeProfile(with: Models.ChangeProfile.Request(changedProfileComponent: .nickname(changedNickname)))

        // assert
        XCTAssertTrue(spy.presentProfileStateCalled, "changeProfile을 호출해서 presenter의 presentProfileState를 호출하지 못했다.")
        XCTAssertEqual(spy.presentProfileStateResponse.nicknameState, .invalidCharacter, "changeProfile을 호출해서 presenter에게 올바른 nickname의 nicknameState를 전달하지 못했다.")
        XCTAssertFalse(spy.presentProfileStateResponse.canEditProfile, "changeProfile을 호출해서 presenter에게 올바른 canEditProfile값을 전달하지 못했다.")
        XCTAssertNil(spy.presentProfileStateResponse.introduceAlertDescription, "presenter에게 올바른 introduceAlertDescription을 전달하지 못했다.")
        XCTAssertFalse(spy.presentProfileStateResponse.canCheckNicknameDuplication!, "changeProfile을 호출해서 presenter에게 올바른 canCheckNicknameDuplication을 전달하지 못했다.")
    }

    func test_changeProfile을_실행했을때_presenter의_presentProfileState가_호출되고_전달된_nickname이_2자_미만_으로_이루어진_한글로만_이루어진_닉네임이면_presenter에_nicknameState를_lessThan2GreaterThan8로_전달한다() {
        // arrange
        let changedNickname = "안"
        let spy = EditProfilePresentationLogicSpy()
        sut.presenter = spy

        // act
        sut.changeProfile(with: Models.ChangeProfile.Request(changedProfileComponent: .nickname(changedNickname)))

        // assert
        XCTAssertTrue(spy.presentProfileStateCalled, "changeProfile을 호출해서 presenter의 presentProfileState를 호출하지 못했다.")
        XCTAssertEqual(spy.presentProfileStateResponse.nicknameState,  .lessThan2GreaterThan8, "changeProfile을 호출해서 presenter에게 올바른 nickname의 nicknameState를 전달하지 못했다.")
        XCTAssertFalse(spy.presentProfileStateResponse.canEditProfile, "changeProfile을 호출해서 presenter에게 올바른 canEditProfile값을 전달하지 못했다.")
        XCTAssertNil(spy.presentProfileStateResponse.introduceAlertDescription, "presenter에게 올바른 introduceAlertDescription을 전달하지 못했다.")
        XCTAssertFalse(spy.presentProfileStateResponse.canCheckNicknameDuplication!, "changeProfile을 호출해서 presenter에게 올바른 canCheckNicknameDuplication을 전달하지 못했다.")
    }
    func test_changeProfile을_실행했을때_presenter의_presentProfileState가_호출되고_전달된_nickname이_2자_미만_으로_이루어진_영어로만_이루어진_닉네임이면_presenter에_nicknameState를_lessThan2GreaterThan8로_전달한다() {
        // arrange
        let changedNickname = "a"
        let spy = EditProfilePresentationLogicSpy()
        sut.presenter = spy

        // act
        sut.changeProfile(with: Models.ChangeProfile.Request(changedProfileComponent: .nickname(changedNickname)))

        // assert
        XCTAssertTrue(spy.presentProfileStateCalled, "changeProfile을 호출해서 presenter의 presentProfileState를 호출하지 못했다.")
        XCTAssertEqual(spy.presentProfileStateResponse.nicknameState,  .lessThan2GreaterThan8, "changeProfile을 호출해서 presenter에게 올바른 nickname의 nicknameState를 전달하지 못했다.")
        XCTAssertFalse(spy.presentProfileStateResponse.canEditProfile, "changeProfile을 호출해서 presenter에게 올바른 canEditProfile값을 전달하지 못했다.")
        XCTAssertNil(spy.presentProfileStateResponse.introduceAlertDescription, "presenter에게 올바른 introduceAlertDescription을 전달하지 못했다.")
        XCTAssertFalse(spy.presentProfileStateResponse.canCheckNicknameDuplication!, "changeProfile을 호출해서 presenter에게 올바른 canCheckNicknameDuplication을 전달하지 못했다.")
    }

    func test_changeProfile을_실행했을때_presenter의_presentProfileState가_호출되고_전달된_nickname이_8자_이상_으로_이루어진_한글영숫자로만_이루어진_닉네임이면_presenter에_nicknameState를_lessThan2GreaterThan8로_전달한다() {
        // arrange
        let changedNickname = "안유진안댕댕good123"
        let spy = EditProfilePresentationLogicSpy()
        sut.presenter = spy

        // act
        sut.changeProfile(with: Models.ChangeProfile.Request(changedProfileComponent: .nickname(changedNickname)))

        // assert
        XCTAssertTrue(spy.presentProfileStateCalled, "changeProfile을 호출해서 presenter의 presentProfileState를 호출하지 못했다.")
        XCTAssertEqual(spy.presentProfileStateResponse.nicknameState, .lessThan2GreaterThan8, "changeProfile을 호출해서 presenter에게 올바른 nickname의 nicknameState를 lessThan2GreaterThan8로 전달하지 못했다.")
        XCTAssertFalse(spy.presentProfileStateResponse.canEditProfile, "changeProfile을 호출해서 presenter에게 올바른 canEditProfile값을 전달하지 못했다.")
        XCTAssertNil(spy.presentProfileStateResponse.introduceAlertDescription, "presenter에게 올바른 introduceAlertDescription을 전달하지 못했다.")
        XCTAssertFalse(spy.presentProfileStateResponse.canCheckNicknameDuplication!, "changeProfile을 호출해서 presenter에게 올바른 canCheckNicknameDuplication을 전달하지 못했다.")
    }

    func test_changeProfile을_실행했을때_presenter의_presentProfileState가_호출되고_전달된_introduce의_길이가_introduceLengthLimit보다_짧으면_presenter에_introduceAlertDescription이_nil_로_전달된다() {
        // arrange
        let changedIntroduce = "안녕하세요 아이브의 리더 안유진입니다."
        let spy = EditProfilePresentationLogicSpy()
        sut.presenter = spy

        // act
        sut.changeProfile(with: Models.ChangeProfile.Request(changedProfileComponent: .introduce(changedIntroduce)))

        // assert
        XCTAssertTrue(spy.presentProfileStateCalled, "changeProfile을 호출해서 presenter의 presentProfileState를 호출하지 못했다.")
        XCTAssertNil(spy.presentProfileStateResponse.introduceAlertDescription, "changeProfile을 호출해서 presenter에게 introduceAlertDescription이 Nil로 전달하지 못했다.")
        XCTAssertTrue(spy.presentProfileStateResponse.canEditProfile, "changeProfile을 호출해서 presenter에게 올바른 canEditProfile값을 전달하지 못했다.")
        XCTAssertNil(spy.presentProfileStateResponse.canCheckNicknameDuplication, "changeProfile을 호출해서 presenter에게 올바른 canCheckNicknameDuplication을 전달하지 못했다.")
        XCTAssertEqual(spy.presentProfileStateResponse.nicknameState, .valid, "changeProfile을 호출해서 presenter에게 올바른 nickname의 nicknameState를 전달하지 못했다.")
    }

    func test_changeProfile을_실행했을때_presenter의_presentProfileState가_호출되고_전달된_introduce의_길이가_ChangeProfile_introduceLengthLimit보다_길면_presenter에_introduceAlertDescription이_IntroduceLengthState_overLength의_description_으로_전달된다() {
        // arrange
        let changedIntroduce = "안녕하세요 아이브의 리더 안유진입니다.안녕하세요 아이브의 리더 안유진입니다.안녕하세요 아이브의 리더 안유진입니다.안녕하세요 아이브의 리더 안유진입니다."
        let spy = EditProfilePresentationLogicSpy()
        sut.presenter = spy

        // act
        sut.changeProfile(with: Models.ChangeProfile.Request(changedProfileComponent: .introduce(changedIntroduce)))

        // assert
        XCTAssertTrue(spy.presentProfileStateCalled, "changeProfile을 호출해서 presenter의 presentProfileState를 호출하지 못했다.")
        XCTAssertEqual(spy.presentProfileStateResponse.introduceAlertDescription, Models.ChangeProfile.IntroduceLengthState.overLength.description,"changeProfile을 호출해서 presenter에게 introduceAlertDescription이 Nil로 전달하지 못했다.")

        XCTAssertFalse(spy.presentProfileStateResponse.canEditProfile, "changeProfile을 호출해서 presenter에게 올바른 canEditProfile값을 전달하지 못했다.")
        XCTAssertNil(spy.presentProfileStateResponse.canCheckNicknameDuplication, "changeProfile을 호출해서 presenter에게 올바른 canCheckNicknameDuplication을 전달하지 못했다.")
        XCTAssertEqual(spy.presentProfileStateResponse.nicknameState, .valid, "changeProfile을 호출해서 presenter에게 올바른 nickname의 nicknameState를 전달하지 못했다.")
    }

    func test_changeProfile을_실행했을때_presenter의_presentProfileState가_호출되고_전달된_introduce가_원래의_introduce와_같으면_presenter에_introduceAlertDescription이_nil로_전달된다() {
        // arrange
        let changedIntroduce = "안녕하세요 아이브의 리더 안유진입니다."
        let spy = EditProfilePresentationLogicSpy()
        sut.presenter = spy

        // act
        sut.changeProfile(with: Models.ChangeProfile.Request(changedProfileComponent: .introduce(changedIntroduce)))

        // assert
        XCTAssertTrue(spy.presentProfileStateCalled, "changeProfile을 호출해서 presenter의 presentProfileState를 호출하지 못했다.")
        XCTAssertNil(spy.presentProfileStateResponse.introduceAlertDescription, "changeProfile을 호출해서 presenter에게 introduceAlertDescription이 Nil로 전달하지 못했다.")

        XCTAssertTrue(spy.presentProfileStateResponse.canEditProfile, "changeProfile을 호출해서 presenter에게 올바른 canEditProfile값을 전달하지 못했다.")
        XCTAssertNil(spy.presentProfileStateResponse.canCheckNicknameDuplication, "changeProfile을 호출해서 presenter에게 올바른 canCheckNicknameDuplication을 전달하지 못했다.")
        XCTAssertEqual(spy.presentProfileStateResponse.nicknameState, .valid, "changeProfile을 호출해서 presenter에게 올바른 nickname의 nicknameState를 전달하지 못했다.")
    }

    func test_changeProfile을_실행했을때_presenter의_presentProfileState가_호출되고_전달된_값이_profileImage라면_이전의_상태값들이_전달된다() {

        // arrange
        let spy = EditProfilePresentationLogicSpy()
        sut.presenter = spy

        // act
        sut.changeProfile(with: Models.ChangeProfile.Request(changedProfileComponent: .profileImage(nil)))

        // assert
        XCTAssertTrue(spy.presentProfileStateCalled, "changeProfile을 호출해서 presenter의 presentProfileState를 호출하지 못했다.")
        XCTAssertNil(spy.presentProfileStateResponse.introduceAlertDescription, "changeProfile을 호출해서 presenter에게 introduceAlertDescription이 Nil로 전달하지 못했다.")
        XCTAssertTrue(spy.presentProfileStateResponse.canEditProfile, "changeProfile을 호출해서 presenter에게 올바른 canEditProfile값을 전달하지 못했다.")
        XCTAssertNil(spy.presentProfileStateResponse.canCheckNicknameDuplication, "changeProfile을 호출해서 presenter에게 올바른 canCheckNicknameDuplication을 전달하지 못했다.")
        XCTAssertEqual(spy.presentProfileStateResponse.nicknameState, .valid, "changeProfile을 호출해서 presenter에게 올바른 nickname의 nicknameState를 전달하지 못했다.")
    }

    func test_checkDuplication을_실행했을때_중복된_닉네임이_아니라면_presenter의_presentNicknameDuplication을_호출하고_올바른_값을_전달한다() async {
        // arrange
        let spy = EditProfilePresentationLogicSpy()
        sut.presenter = spy

        // act
        await sut.checkDuplication(with: Models.CheckNicknameDuplication.Request(nickname: "안유진"))

        // assert
        XCTAssertTrue(spy.presentNicknameDuplicationCalled, "checkDuplication을 호출해서 presenter의 presentNicknameDuplication을 호출하지 못했다.")
        XCTAssertTrue(spy.presentNicknameDuplicationResponse.isValid,
                      "checkDuplication을 호출해서 presenter에게 올바른 isValid값을 전달하지 못했다.")
        XCTAssertTrue(spy.presentNicknameDuplicationResponse.canEditProfile,
                     "checkDuplication을 호출해서 presenter에게 올바른 canEditProfile값을 전달하지 못했다.")
    }

    func test_checkDuplication을_실행했을때_중복된_닉네임이라면_presenter의_presentNicknameDuplication을_호출하고_올바른_값을_전달한다() async {

        // arrange
        let spy = EditProfilePresentationLogicSpy()
        sut.presenter = spy
        sut.userWorker = UserWorkerMock()

        // act
        await sut.checkDuplication(with: Models.CheckNicknameDuplication.Request(nickname: "안유진"))

        // assert
        XCTAssertTrue(spy.presentNicknameDuplicationCalled, "checkDuplication을 호출해서 presenter의 presentNicknameDuplication을 호출하지 못했다.")
        XCTAssertFalse(spy.presentNicknameDuplicationResponse.isValid,
                       "checkDuplication을 호출해서 presenter에게 올바른 isValid값을 전달하지 못했다.")
        XCTAssertFalse(spy.presentNicknameDuplicationResponse.canEditProfile,
                        "checkDuplication을 호출해서 presenter에게 올바른 canEditProfile값을 전달하지 못했다.")}

    // TODO: editProfile 테스트 메서드는 내부 병렬실행 이슈 해결 후 작성
}
