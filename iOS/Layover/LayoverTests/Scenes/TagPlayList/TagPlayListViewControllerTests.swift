//
//  TagPlayListViewControllerTests.swift
//  Layover
//
//  Created by 김인환 on 12/11/23.
//  Copyright (c) 2023 CodeBomber. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Layover
import XCTest

final class TagPlayListViewControllerTests: XCTestCase {
    // MARK: Subject under test

    var sut: TagPlayListViewController!
    var window: UIWindow!

    // MARK: - Test lifecycle

    override func setUp() {
        super.setUp()
        window = UIWindow()
        setupTagPlayListViewController()
    }

    override func tearDown() {
        window = nil
        super.tearDown()
    }

    // MARK: - Test setup

    func setupTagPlayListViewController() {
        sut = TagPlayListViewController()
    }

    func loadView() {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }

    // MARK: - Test doubles

    final class TagPlayListBusinessLogicSpy: TagPlayListBusinessLogic {
        var setTitleTagCalled = false
        var fetchPlayListCalled = false
        var fetchMorePlayListCalled = false
        var showPostsDetailCalled = false

        func setTitleTag(request: Layover.TagPlayListModels.FetchTitleTag.Request) {
            setTitleTagCalled = true
        }

        func fetchPlayList(request: Layover.TagPlayListModels.FetchPosts.Request) async -> Bool {
            fetchPlayListCalled = true
            return true
        }

        func fetchMorePlayList(request: Layover.TagPlayListModels.FetchMorePosts.Request) async -> Bool {
            fetchMorePlayListCalled = true
            return true
        }

        func showPostsDetail(request: Layover.TagPlayListModels.ShowPostsDetail.Request) {
            showPostsDetailCalled = true
        }
    }

    final class TagPlayListRouterSpy: TagPlayListRoutingLogic, TagPlayListDataPassing {
        var dataStore: TagPlayListDataStore?

        var routeToPlaybackCalled = false

        func routeToPlayback() {
            routeToPlaybackCalled = true
        }
    }

    // MARK: - Tests

    func test_viewDidLoad가_호출되면_interactor에게_titleTag를_요청한다() {
        // Arrange
        let spy = TagPlayListBusinessLogicSpy()
        sut.interactor = spy

        // Act
        sut.viewDidLoad()

        // Assert
        XCTAssertTrue(spy.setTitleTagCalled, "viewDidLoad() 가 호출되어 interactor에게 titleTag를 요청하지 못했다.")
    }

    func test_viewWillAppear가_호출되면_interactor에게_playList를_요청한다() {
        // Arrange
        let spy = TagPlayListBusinessLogicSpy()
        sut.interactor = spy

        // Act
        sut.viewWillAppear(true)

        // Assert
        Task {
            try await Task.sleep(nanoseconds: 3_000_000_000)
            XCTAssertTrue(spy.fetchPlayListCalled, "viewWillAppear()가 호출되어 interactor의 fetchPlayList를 호출하지 못했다.")
        }
    }

    func test_scrollView가_아래_끝에_다다라_scrollViewWillBeginDecelearting가_호출되면_interactor의_fetchMorePlayList를_호출한다() {
        // Arrange
        let spy = TagPlayListBusinessLogicSpy()
        sut.interactor = spy
        let scrollView = UIScrollView(frame: .init(x: 0, y: 0, width: 100, height: 100))
        scrollView.contentOffset.y = 300
        scrollView.contentSize = .init(width: 100, height: 50)

        // Act
        sut.scrollViewWillBeginDecelerating(scrollView)

        // Assert
        Task {
            try await Task.sleep(nanoseconds: 3_000_000_000)
            XCTAssertTrue(spy.fetchMorePlayListCalled, "scrollView가 아래 끝에 다다라 scrollViewWillBeginDecelerating() 이 호출되어 interactor의 fetchMorePlayList를 호출하지 못했다.")
        }
    }

    func test_scrollView가_아래_끝에_다다르지_않은_상태에서_scrollViewWillBeginDecelearting가_호출되면_interactor의_fetchMorePlayList를_호출하지_않는다() {
        // Arrange
        let spy = TagPlayListBusinessLogicSpy()
        sut.interactor = spy
        let scrollView = UIScrollView(frame: .init(x: 0, y: 0, width: 100, height: 100))
        scrollView.contentOffset.y = 100
        scrollView.contentSize = .init(width: 100, height: 200)

        // Act
        sut.scrollViewWillBeginDecelerating(scrollView)

        // Assert
        Task {
            try await Task.sleep(nanoseconds: 3_000_000_000)
            XCTAssertFalse(spy.fetchMorePlayListCalled, "scrollView가 아래 끝에 다다르지 않고 scrollViewWillBeginDecelerating() 이 호출되어 interactor의 fetchMorePlayList를 호출했다.")
        }
    }

    func test_collectionView의_didSelectItemAt이_호출되면_interactor에게_showPostsDetail를_요청한다() {
        // Arrange
        let spy = TagPlayListBusinessLogicSpy()
        sut.interactor = spy
        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: .init())

        // Act
        sut.collectionView(collectionView, didSelectItemAt: IndexPath(item: 0, section: 0))

        // Assert
        Task {
            try await Task.sleep(nanoseconds: 3_000_000_000)
            XCTAssertTrue(spy.showPostsDetailCalled, "collectionView의 didSelectItemAt을 호출해서 interactor에게 showPostsDetail를 요청하지 못했다.")
        }
    }

    func test_collectionView의_didSelectItemAt이_호출되면_router에게_routeToPlayback을_요청한다() {
        // Arrange
        let spy = TagPlayListRouterSpy()
        sut.router = spy
        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: .init())

        // Act
        sut.collectionView(collectionView, didSelectItemAt: IndexPath(item: 0, section: 0))

        // Assert
        XCTAssertTrue(spy.routeToPlaybackCalled, "collectionView의 didSelectItemAt을 호출해서 router에게 routeToPlayback을 요청하지 못했다.")
    }
}
